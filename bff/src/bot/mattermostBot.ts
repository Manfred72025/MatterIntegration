import WebSocket from 'ws';
import { mattermostMessageLogger } from '../loggers';
import { config } from '../config';
import mmClient from '../mattermostClient';

// –¢–∏–ø —Å–æ–±—ã—Ç–∏—è WebSocket Mattermost
interface WebSocketEvent {
  event: string;
  data?: any;
}

interface PostMessage {
  id: string;
  message: string;
  channel_id: string;
  user_id: string;
  root_id?: string;
  [key: string]: any;
}

// –ö–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mattermost
const MATTERMOST_WS_URL = (config.MATTERMOST_URL.replace(/^http/, 'ws') + '/api/v4/websocket');
const BOT_TOKEN = config.BOT_TOKEN;

export class MattermostBot {
  private ws: WebSocket | null = null;
  private client: any = null; // Mattermost API –∫–ª–∏–µ–Ω—Ç
  private userCache: Map<string, string> = new Map(); // user_id -> username

  constructor(client?: any) {
    if (client) {
      this.client = client;
    } else {
      this.client = mmClient;
    }
  }

  start() {
    this.ws = new WebSocket(MATTERMOST_WS_URL, {
      headers: {
        Authorization: `Bearer ${BOT_TOKEN}`,
      },
    });

    this.ws.on('open', () => {
      mattermostMessageLogger.info('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Mattermost —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.');
      console.log('MattermostBot: WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Mattermost —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.');
    });

    this.ws.on('message', async (data) => {
      try {
        const event: WebSocketEvent = JSON.parse(data.toString());
        await this.handleWebSocketEvent(event);
      } catch (err) {
        mattermostMessageLogger.error({
          message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Mattermost',
          error: err,
          raw: data.toString(),
          timestamp: new Date().toISOString(),
        });
      }
    });

    this.ws.on('error', (err) => {
      mattermostMessageLogger.error({
        message: 'WebSocket ERROR',
        error: err,
        timestamp: new Date().toISOString(),
      });
    });

    this.ws.on('close', () => {
      mattermostMessageLogger.info({
        message: 'WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ',
        timestamp: new Date().toISOString(),
      });
    });
  }

  private async handleWebSocketEvent(event: WebSocketEvent): Promise<void> {
    switch (event.event) {
      case 'posted':
        await this.handleNewPost(event);
        break;
      case 'post_edited':
        await this.handleEditedPost(event);
        break;
      case 'post_deleted':
        await this.handleDeletedPost(event);
        break;
      case 'hello':
        mattermostMessageLogger.info('Received hello from WebSocket');
        break;
      default:
        mattermostMessageLogger.debug(`Unhandled event: ${event.event}`);
    }
  }

  private async getUsernameById(userId: string): Promise<string> {
    if (this.userCache.has(userId)) {
      return this.userCache.get(userId)!;
    }
    try {
      const user = await this.client.getUser(userId);
      const username = user?.username || userId;
      this.userCache.set(userId, username);
      return username;
    } catch (err) {
      return userId;
    }
  }

  private async handleNewPost(event: WebSocketEvent): Promise<void> {
    let post: PostMessage | null = null;
    if (event.data && event.data.post) {
      try {
        post = JSON.parse(event.data.post);
      } catch (err) {
        mattermostMessageLogger.error({
          message: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞',
          error: err,
          raw: event.data.post,
          timestamp: new Date().toISOString(),
        });
      }
    }
    if (post) {
      const username = await this.getUsernameById(post.user_id);
      mattermostMessageLogger.info({
        type: 'mattermost_message',
        user_id: post.user_id,
        username,
        message: post.message,
        timestamp: new Date().toISOString(),
      });
      console.log(`MattermostBot: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}: ${post.message}`);
      await this.processMessage(post);
    }
  }

  private async handleEditedPost(event: WebSocketEvent): Promise<void> {
    await this.logPostEvent(event, 'mattermost_message_edited', '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞');
  }

  private async handleDeletedPost(event: WebSocketEvent): Promise<void> {
    await this.logPostEvent(event, 'mattermost_message_deleted', '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞');
  }

  private async logPostEvent(event: WebSocketEvent, type: string, errorMsg: string): Promise<void> {
    if (event.data && event.data.post) {
      try {
        const post: PostMessage = JSON.parse(event.data.post);
        const username = await this.getUsernameById(post.user_id);
        mattermostMessageLogger.info({
          type,
          user_id: post.user_id,
          username,
          message: post.message,
          timestamp: new Date().toISOString(),
        });
      } catch (err) {
        mattermostMessageLogger.error({
          message: errorMsg,
          error: err,
          raw: event.data.post,
          timestamp: new Date().toISOString(),
        });
      }
    }
  }

  private async processMessage(post: PostMessage): Promise<void> {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã, –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ç.–¥.
    if (post.message && post.message.toLowerCase().includes('–ø—Ä–∏–≤–µ—Ç')) {
      mattermostMessageLogger.info('Detected greeting message');
      // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
      // await this.sendResponse(post.channel_id, '–ü—Ä–∏–≤–µ—Ç! üëã');
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞–∫—Ä—ã—Ç–∏—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    if (post.message) {
      const msg = post.message.toLowerCase();
      if ( msg.includes('–∑–∞–∫—Ä—ã—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ')) {
        mattermostMessageLogger.info('Detected close discussion command');
        await this.sendResponse(post.channel_id, '–æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ', post.root_id);
      }
    }
  }

  private async sendResponse(channelId: string, message: string, rootId?: string): Promise<void> {
    try {
      if (!this.client) throw new Error('Mattermost client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      await this.client.createPost({
        channel_id: channelId,
        message: message,
        root_id: rootId
      });
      mattermostMessageLogger.info(`Sent response to channel ${channelId}`);
    } catch (error) {
      mattermostMessageLogger.error('Error sending response:', error);
    }
  }
} 